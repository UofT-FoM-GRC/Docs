{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation for GRC Members","text":"<p>This is the documentation for GRC members working on the data analysis part of the project. It contains information on the best practices for version control, data analysis, and other useful tips.</p>"},{"location":"#project-layout","title":"Project Layout","text":"<pre><code>.\n\u251c\u2500\u2500 config              # Configuration files\n\u2502\n\u251c\u2500\u2500 data                \n\u2502   \u251c\u2500\u2500 cleaned         # Cleaned output\n\u2502   \u251c\u2500\u2500 google          # Google Form API output (JSON)\n\u2502   \u251c\u2500\u2500 misc            # Miscellaneous data\n\u2502   \u2514\u2500\u2500 raw             # Unprocessed data\n\u2502\n\u251c\u2500\u2500 docs                # Documentation\n\u251c\u2500\u2500 figures             # Figures for Final Report\n\u2502\n\u251c\u2500\u2500 src             \n\u2502   \u251c\u2500\u2500 api             # Code for interacting with APIs (i.e. Google Forms)\n\u2502   \u251c\u2500\u2500 models          # Schema definitions\n\u2502   \u251c\u2500\u2500 notebooks       # Jupyter notebooks\n\u2502   \u251c\u2500\u2500 R               # R scripts\n\u2502   \u251c\u2500\u2500 services        # Business logic\n\u2502   \u2514\u2500\u2500 utils           # Utility functions\n\u2502\n\u251c\u2500\u2500 tests               # Unit tests\n\u251c\u2500\u2500 mkdocs.yml          # MkDocs configuration\n\u251c\u2500\u2500 poetry.lock         # Poetry lock file\n\u251c\u2500\u2500 pyproject.toml      # Poetry project file\n\u2514\u2500\u2500 README.md           # Project README\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#prerequisites","title":"Prerequisites","text":"<p>Ensure you have Python 3.12 installed on your machine. You can download it from the official website.</p>"},{"location":"#installation","title":"Installation","text":"<ol> <li>Clone the repository</li> </ol> <pre><code>git clone https://github.com/UofT-FoM-GRC/Data_Analysis.git\ncd Data_Analysis\n</code></pre> <ol> <li>Install the dependencies</li> </ol> <pre><code>poetry install\n</code></pre> <ol> <li>Activate the virtual environment</li> </ol> <pre><code>poetry shell\n</code></pre>"},{"location":"#vscode-extensions","title":"VSCode Extensions","text":"<ul> <li>autoDocstring - Automatically generates Python docstrings.</li> <li>Better Comments - Improve your code commenting by annotating with alert, informational, TODOs, and more.</li> <li>Conventional Commits - A specification for adding human and machine</li> <li>Github Pull Requests and Issues - Pull request and issue functionality built into Visual Studio Code.</li> <li>Markdown All in One - All you need to write Markdown (keyboard shortcuts, table of contents, auto preview and more).</li> <li>Path Intellisense - Autocompletes filenames.</li> <li>Prettier - Code formatter - Code formatter using Prettier.</li> <li>Pylance - A new language server for Python.</li> <li>Python - Linting, debugging, Jupyter Notebooks, and more.</li> <li>Python Indent - Indentation for Python.</li> <li>R - R language support.</li> <li>R Debugger - R debugging support.</li> <li>Ruff - Python linting.</li> <li>YAML - YAML language support.</li> </ul>"},{"location":"#previewing-these-docs","title":"Previewing these docs","text":"<p>These docs are built using MkDocs. To preview these docs locally, you will need to install MkDocs and the Material theme.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"data_analysis_pipeline/","title":"Data Survey Analysis Pipeline","text":""},{"location":"data_analysis_pipeline/#introduction","title":"Introduction","text":"<p>Fundamentally, the data survey analysis pipeline is split into the following phases:</p> <p>1) Calling the Google Forms API to retrieve the metadata for a particular year's form</p> <p>2) Updating the rename (i.e. \"common name\") configuration file</p> <p>3) Rebuilding the data tidying config</p> <p>4) Applying the data tidying config to all the survey data files to generate a single longitudinal dataframe</p> <p>5) Doing your specific analyses</p>"},{"location":"data_analysis_pipeline/#calling-the-google-forms-api","title":"Calling the Google Forms API","text":"<p>The Google Forms API is called using the <code>google-forms-api</code> package. The metadata that is retrieved looks akin the following example for a particular field:</p> <pre><code>        {\n            \"itemId\": \"3c5cb287\",\n            \"title\": \"If you did not (or will not) transfer into a PhD, what specifically impacted your decision?\",\n            \"questionItem\": {\n                \"question\": {\n                    \"questionId\": \"6cbc03ed\",\n                    \"choiceQuestion\": {\n                        \"type\": \"CHECKBOX\",\n                        \"options\": [\n                            {\n                                \"value\": \"Have dependents to take care of\"\n                            },\n                            {\n                                \"value\": \"Can't afford to live in Toronto\"\n                            },\n                            {\n                                \"value\": \"Proceeding to professional school\"\n                            },\n                            {\n                                \"value\": \"Long duration of PhD program in combination with the current level of funding\"\n                            },\n                            {\n                                \"isOther\": true\n                            }\n                        ]\n                    }\n                }\n            }\n        },\n</code></pre> <p>These are saved in the <code>data/google</code> directory as <code>Form_Metadata_YYYY_YY.json</code> where <code>YYYY_YY</code> is the academic years that the form was active for.</p>"},{"location":"data_analysis_pipeline/#updating-the-rename-configuration-file","title":"Updating the Rename Configuration File","text":"<p>The next step is to make sense of which fields are common between the years. This is accomplished using a rename configuration file located at <code>/config/GRC_Rename_Config.yaml</code>. Here is what a typical entry looks like:</p> <pre><code>  - name: scholarshipsMotive\n    history:\n      2017: null\n      2018: null\n      2019: What is your motivation to apply for scholarships/awards? (select all that apply)\n      2020: What is your motivation to apply for scholarships/awards?\n      2021: What is your motivation to apply for scholarships/awards?\n      2022: What is your motivation to apply for scholarships/awards?\n      2023: What is your motivation to apply for scholarships/awards?\n</code></pre> <p>The <code>name</code> field is the common name that will be used in the final longitudinal dataframe. The <code>history</code> field is a dictionary where the keys are the years and the values are the corresponding field names in the Google Form metadata. If the field was not present in a particular year, the value is <code>null</code>.</p> <p>There will be specific service functions prepared in <code>/src/services/update_rename.py</code> that will auto-update the rename config file with the newest year pre-populated with a <code>null</code> value.</p> <p>THIS SHOULD BE UPDATED IN REAL-TIME AS NEW SURVERYS ARE BEING DEVELOPED BY THE TEAM. ASSIGN A PARTICULAR PERSON TO BE RESPONSIBLE FOR THIS TASK.</p>"},{"location":"data_analysis_pipeline/#rebuilding-the-data-tidying-config","title":"Rebuilding the Data Tidying Config","text":"<p>Using the metadata from the Google Forms API and the rename configuration file, the data tidying config can be rebuilt. Like the rename configuration file, this is located at <code>/config/GRC_Tidy_Config.yaml</code> . Here is what a typical entry looks like:</p> <p>TODO</p> <p>There are multiple operations that can be specified on the data. These are applied in the order that they are specified in the config file. The operations are:</p> <ul> <li><code>PASSTHROUGH</code>: This operation does nothing. It is used to pass the data through to the next operation.</li> <li><code>RENAME</code>: This operation renames the column to the common name specified in the rename configuration file.</li> <li><code>REPLACE</code>: This operation replaces the values in the column with the specified values.</li> <li><code>SPLIT_TO_WIDE</code>: This operation splits the column into multiple columns based on the specified delimiter. This is particularly used for checkbox fields, as the separator that Google uses is <code>\", \"</code>.</li> <li><code>REGEX_EXTRACT_AND_REPLACE</code>: This operation extracts a series of text values from text fields using a regular expression and replaces the original text field with the extracted values. This is useful for syncing up data that used to be in text fields but are now in radio/dropdown fields.</li> <li><code>ONE_HOT_ENCODE</code>: This operation one-hot encodes the column. This is useful for syncing up radio/dropdown fields that have changed over the years to become checkbox fields.</li> <li><code>RENAME_ROWS</code>: This is a unique operation to grid-based fields. It renames the rows to the specified values. Note that this specifically targets the row names as they appear in the raw excel output, typically in the format <code>Main_Quesiton [Row_Name]</code>. The <code>Main_Question</code> part is unaffected and should be handled by the <code>RENAME</code> operation. To avoid bugs it is recommended to run this first and prior to the RENAME operation</li> </ul> <p>There will be specific service functions in <code>/src/services/build_tidy.py</code> prepared that will auto-update the tidy config file with the \"best guess\" series of operations that should be applied to the data for a particular year.</p> <p>IT SHOULD BE THE COLLECTIVE RESPONSIBILITY OF THE DATA ANALYSTS TO ENSURE THAT THE \"BEST GUESS\" OPERATIONS ARE APPROPRIATE TO THE DATA ANALYSIS AND TO ADJUST THE CONFIG AS NECESSARY MANUALLY. MANUAL CHANGES ALWAYS SUPERIMPOSE AUTOMATIC ONES.</p>"},{"location":"data_analysis_pipeline/#applying-the-data-tidying-config","title":"Applying the Data Tidying Config","text":"<p>Once the data tidying config is set up, the data can be tidied using the <code>src/services/apply_tidy</code> service functions. The output will be a single longitudinal dataframe that can be used for analysis located in the <code>/data/cleaned/survey</code> directory.</p>"},{"location":"data_analysis_pipeline/#doing-your-specific-analyses","title":"Doing Your Specific Analyses","text":"<p>This will be up to you, dear data analyst. Godspeed.</p>"},{"location":"version_control/branches/","title":"Branches","text":""},{"location":"version_control/branches/#branching-strategy","title":"\ud83d\udccb Branching Strategy","text":"<p>This repository uses a variation of the convention known as GitFlow. There are three main kinds of branches:</p> <ul> <li><code>main</code></li> <li><code>dev</code></li> <li>Feature branches</li> </ul> <p></p>"},{"location":"version_control/branches/#main-branch","title":"<code>main</code> Branch","text":"<ul> <li>The <code>main</code> branch is the primary branch of the repository.</li> <li>It should only contain stable code. Ideally, the repository owner should merge code into this branch at the end of the project to prepare the next year's team.</li> </ul>"},{"location":"version_control/branches/#dev-branch","title":"<code>dev</code> Branch","text":"<ul> <li>The <code>dev</code> branch is for integrating feature branches into. </li> <li>When a feature is complete, it is merged into the <code>dev</code> branch.</li> </ul>"},{"location":"version_control/branches/#feature-branches","title":"Feature Branches","text":"<ul> <li>Each new feature or bug fix should be developed in its own branch, created off the <code>dev</code> branch.</li> <li>Feature, bugfixes, etc. branches should be named according to the following convention: <ul> <li><code>feat/&lt;name&gt;</code></li> <li><code>fix/&lt;name&gt;</code>.</li> </ul> </li> </ul> <p>Where <code>&lt;name&gt;</code> is a short, descriptive name of the feature or bug fix. If it is based off an issue, the name should start wth <code>#&lt;issue_number&gt;</code>. For example, <code>feature/#1-add-login-page</code>.</p>"},{"location":"version_control/branches/#ground-rules","title":"\ud83d\udea8 Ground Rules","text":"<ul> <li> <p>Never commit directly to the <code>main</code> branch.</p> </li> <li> <p>Never commit directly to the <code>dev</code> branch.</p> </li> <li> <p>Always create a new branch for each new feature or bug fix.</p> </li> <li> <p>One person per branch. Each team member should work on their own branch. This ensures that there is safety in force pushing to the remote feature branch when necessary.</p> <ul> <li>The exception to this is any interactive live-collaboration in which two or more team members are communicating in real time to avoid commit/merge/rebase conflicts.</li> </ul> </li> </ul>"},{"location":"version_control/branches/#i-basic-branching-commands","title":"\u2139\ufe0f Basic Branching Commands","text":""},{"location":"version_control/branches/#create-a-new-branch","title":"Create a New Branch","text":"<pre><code>git checkout -b &lt;branch_name&gt;\n</code></pre>"},{"location":"version_control/branches/#switch-to-a-branch","title":"Switch to a Branch","text":"<pre><code>git checkout &lt;branch_name&gt;\n</code></pre>"},{"location":"version_control/branches/#list-branches","title":"List Branches","text":"<pre><code>git branch\n</code></pre>"},{"location":"version_control/branches/#delete-a-branch","title":"Delete a Branch","text":"<pre><code>git branch -d &lt;branch_name&gt;\n</code></pre>"},{"location":"version_control/committing/","title":"Committing","text":""},{"location":"version_control/committing/#warning","title":"\u26a0\ufe0f Warning","text":"<p>Just a reminder to NEVER commit any sensitive information to the repository. This includes API keys, passwords, and other credentials. If you accidentally commit sensitive information, please inform the team immediately so that we can take the necessary steps to secure the repository.</p>"},{"location":"version_control/committing/#tools","title":"\ud83d\udee0\ufe0f Tools","text":"<p>Please use the Conventional Commits extension for VS Code to make it easy for you to make consistently standardized commits:</p> <p></p>"},{"location":"version_control/committing/#useful-tips","title":"\ud83c\udfeb Useful Tips","text":""},{"location":"version_control/committing/#ammending-commits","title":"\u270f\ufe0f Ammending Commits","text":"<p>If you need to amend a commit message from the latest commit, you can use the following command:</p> <pre><code>git commit --amend\n</code></pre> <p>Here is a useful resource for amending commits: Git Amend Tutorial: Rewrite Git History</p>"},{"location":"version_control/committing/#squashing-commits","title":"\ud83d\udca6 Squashing Commits","text":"<p>If you need to squash multiple commits into one, you can use the following command:</p> <pre><code>git rebase -i HEAD~&lt;number_of_commits&gt;\n</code></pre> <p>Alternatively, use <code>git log</code> to find the commit hash of the last commit you want to squash and use the following command:</p> <pre><code>git rebase -i &lt;commit_hash&gt;\n</code></pre> <p>This will open an interactive rebase window where you can squash commits.</p> <p>For more information on squashing using interactive rebase, this is a useful video: Learn Git Squash in 3 minutes.</p>"},{"location":"version_control/committing/#keeping-the-feature-branch-up-to-date","title":"\ud83d\ude0e Keeping the feature branch up-to-date","text":"<p>We use a <code>git rebase</code> strategy to keep the feature branch up-to-date with the <code>dev</code> branch. This ensures that the feature branch is always based on the latest changes in the <code>dev</code> branch.</p> <p>First check that the <code>dev</code> branch is up-to-date:</p> <pre><code>git checkout dev\ngit pull\n</code></pre> <p>If nothing has changed, you can switch back to your feature branch and continue working as usual. However, if there have been changes in the meantime, you will need to rebase your feature branch on the updated <code>dev</code> branch:</p> <pre><code>git checkout &lt;feature_branch&gt;\ngit rebase dev\n</code></pre> <p>Note that this may cause conflicts that you will need to resolve. If you are unsure how to resolve conflicts, please refer to the Resolve Git MERGE CONFLICTS: The Definitive Guide video. Yes, it says \"merge conflicts,\" but the same principles apply to rebasing.</p>"},{"location":"version_control/committing/#i-dont-know-what-im-doing-and-i-dont-know-how-to-exit-the-rebase","title":"\u26a0\ufe0f I don't know what I'm doing and I don't know how to exit the rebase!","text":"<p>If you find yourself in the middle of a rebase and you don't know what you're doing, you can exit the rebase by running the following command:</p> <pre><code>git rebase --abort\n</code></pre> <p>This will take you back to the state before you started the rebase. You can then try again or ask for help.</p>"},{"location":"version_control/committing/#i-cant-push-my-changes-to-remote-after-rebasing","title":"\u26a0\ufe0f I can't push my changes to remote after rebasing!","text":"<p>Yes, this is the single major downside of rebasing if you have already pushed some of your local feature branch commits to the remote feature branch. You will need to force push your changes to the remote feature branch:</p> <pre><code>git push origin &lt;feature_branch&gt; --force\n</code></pre> <p>Force pushing is normally taboo in all other cases, but because of the Ground Rules: One person per branch, there is no risk of inadvertently overwriting someone else's work.</p>"},{"location":"version_control/merging/","title":"Merging","text":"<p>Alright, so you've made a feature branch, made some meaningful commits, and now you're ready to merge your changes back into the <code>dev</code> branch.</p> <p>You may want to watch this first to get a better understanding of what will follow below: Git Merge vs. Rebase.</p>"},{"location":"version_control/merging/#always-pull-before-merging","title":"\u2b07\ufe0f Always Pull Before Merging","text":"<p>Before you merge your changes, make sure you pull the latest changes from the <code>dev</code> branch to ensure that you are up-to-date with the latest changes.</p> <pre><code>git checkout dev\ngit pull\n</code></pre> <p>If you have issues with pulling, chances are you haven't set upstream. You can set the upstream branch by running the following command:</p> <pre><code>git branch --set-upstream-to=origin/dev dev\n</code></pre>"},{"location":"version_control/merging/#rebase-your-feature-branch-from-the-updated-dev-branch","title":"\u27bf Rebase Your Feature Branch from the updated <code>dev</code> Branch","text":"<p>After pulling the latest changes from the <code>dev</code> branch, switch back to your feature branch and rebase it with the updated <code>dev</code> branch.</p> <pre><code>git checkout &lt;feature_branch&gt;\ngit rebase dev\n</code></pre>"},{"location":"version_control/merging/#why-do-we-do-this","title":"Why do we do this?!","text":"<p>It is entirely possible that changes to <code>dev</code> may have occurred while you were working on your feature branch. <code>main</code> is used as an example below, but the same concept applies to <code>dev</code>.</p>"},{"location":"version_control/merging/#resolve-conflicts","title":"\u26a0\ufe0f Resolve Conflicts","text":"<p>Now, this may or may not happen, but if there are any conflicts, Git will prompt you to resolve them. </p> <p>Here is a useful resource: Resolve Git MERGE CONFLICTS: The Definitive Guide</p> <p>As per resource, you will have to stage changes and make a new commit to resolve the conflict. Assuming you're not too lazy, you may want to squash the conflict resolution commit with the commit that caused the conflict to keep things clean.</p>"},{"location":"version_control/merging/#check-that-all-tests-pass","title":"\u2705 Check that all tests pass","text":"<p>Before merging your feature branch into <code>dev</code>, make sure that all tests pass. This is to ensure that your changes do not break any existing functionality.</p>"},{"location":"version_control/merging/#merge-your-feature-branch-into-dev","title":"\ud83d\udcce Merge Your Feature Branch into <code>dev</code>","text":"<p>Once you have resolved any conflicts, you can now merge your feature branch into the <code>dev</code> branch.</p> <pre><code>git checkout dev\ngit merge &lt;feature_branch&gt;\n</code></pre> <p>No issues should happen because you've already resolved any conflicts in the previous step.</p>"},{"location":"version_control/merging/#push-your-changes","title":"\u270d\ufe0f Push Your Changes","text":"<p>You can now update the remote repository's <code>dev</code> branch with your changes.</p> <pre><code>git checkout dev\ngit push\n</code></pre>"},{"location":"version_control/merging/#delete-your-feature-branch","title":"\ud83d\uddd1\ufe0f Delete Your Feature Branch","text":"<p>After merging your feature branch into <code>dev</code>, you can delete your feature branch.</p> <pre><code>git branch -d &lt;feature_branch&gt;\n</code></pre>"},{"location":"version_control/merging/#delete-remote-feature-branch","title":"\ud83d\uddd1\ufe0f Delete Remote Feature Branch","text":"<p>If you want to delete the remote feature branch, you can do so by running the following command:</p> <pre><code>git push origin --delete &lt;feature_branch&gt;\n</code></pre>"}]}